<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="com.company.app.infra.member.MemberMapper">

	<resultMap type="com.company.app.infra.member.Member" id="resultMapObj"></resultMap>
	<sql id ="selectCommon">
   		FROM    
	    	member a
	    	LEFT JOIN memberAddress b on b.member_seq = a.seq 
    		LEFT JOIN memberPhone c on c.member_seq = a.seq AND c.defaultNY = 1
		WHERE 1=1
			<if test="name != null and !name.equals('')">AND name LIKE CONCAT('%',#{name},'%')</if>
			<if test="gender != null and !gender.equals('')">AND gender LIKE CONCAT('%',#{gender},'%')</if>
			<if test="emailAccount != null and !emailAccount.equals('')">AND emailAccount LIKE CONCAT('%',#{emailAccount},'%')</if>
    </sql>
    <sql id="selectMember">
    	a.seq,
   		a.emailFull,
   		a.emailDomain,
   		a.emailAccount,
   		a.id,
   		a.password,
   		a.name,
   		a.dob,
   		a.gender,
   		a.phoneAgree,
   		a.phoneAgreeDate,
   		a.emailAgree,
   		a.emailAgreeDate,
   		a.memberType,
   		a.brn,
   		a.delNy,
   		b.defaultNy,
   		b.zipCode,
   		b.address,
   		b.addressDetail,
		c.number
    </sql>


   	<select id="selectOneCount" resultType="Integer">
		SELECT count(*)
		<include refid="selectCommon" />
	</select>
   	<select id="selectList" resultMap="resultMapObj">
		SELECT aa.* FROM (   	
	   		SELECT
    		<include refid="selectMember" />
	    	<include refid="selectCommon" />
		) aa
		LIMIT #{rowNumToShow} OFFSET #{startRnumForMysql}	   			
   	</select>
   	
   	<select id="selectListPhone" resultMap="resultMapObj">
   		SELECT
   			seq,
   			defaultNy,
   			number,
   			delNy
   		FROM
   			memberPhone
   		WHERE 1=1
   			AND delNy = 0
   			AND member_seq = #{seq}
   	
   	</select>
    
    <insert id="insertMember">
    	insert into `member` (
    		emailFull,
			emailDomain,
			emailAccount,
			id,
			password,
			name,
			dob,
			gender,
			phoneAgree,
			phoneAgreeDate,
			emailAgree,
			emailAgreeDate,
			delNy,
		    memberType
    	) values(
    		CONCAT (#{emailDomain},'@',#{emailAccount}),
    		#{emailDomain},
    		#{emailAccount},
    		#{id},
    		#{password},
    		#{name},
    		#{dob},
    		#{gender},
    		<choose>
				<when test="phoneAgree != null">#{phoneAgree},</when>   
				<otherwise>0,</otherwise>
			</choose>
    		now(),
    		<choose>
				<when test="emailAgree != null">#{emailAgree},</when>
				<otherwise>0,</otherwise>
			</choose>
    		now(),
    		0,
    		0
    	)
    	<selectKey resultType="String" keyProperty="seq" order="AFTER">
			SELECT last_insert_id()
		 </selectKey>
    </insert>
    <insert id="insertAddress">
    	insert into `memberAddress`(
    		zipCode,
    		address,
    		addressDetail,
    		delNy,
    		member_seq
    	) values (
    		#{zipCode},
    		#{address},
    		#{addressDetail},
    		0,
    		#{seq}
    	)
    </insert>
    <insert id="insertPhone">
    	insert into `memberPhone` (
    		defaultNy,
    		number,
    		delNy,
    		member_seq
    	) values (
    	
<!--     		<choose> -->
<!-- 				<when test="phoneMark != null">#{phoneMark},</when> -->
<!-- 				<otherwise>0,</otherwise> -->
<!-- 			</choose> -->
			#{phoneMark},			
    		#{number},
    		0,
    		#{seq}
    	)
    
    </insert>
    
    <select id="selectOne" resultMap="resultMapObj">
    	SELECT
    		<include refid="selectMember" />
    	FROM
    		member a
	    	LEFT JOIN memberAddress b on b.member_seq = a.seq 
    		LEFT JOIN memberPhone c on c.member_seq = a.seq AND c.defaultNy = 1
		WHERE 1=1
			<if test="name != null and !name.equals('')">AND name LIKE CONCAT('%',#{name},'%')</if>
			<if test="gender != null and !gender.equals('')">AND gender LIKE CONCAT('%',#{gender},'%')</if>
			<if test="emailAccount != null and !emailAccount.equals('')">AND emailAccount LIKE CONCAT('%',#{emailAccount},'%')</if>
	    	AND a.seq = #{seq}
	    	
    </select>
    
    <select id="selectId" resultMap="resultMapObj">
    	SELECT
    		seq,
    		name,
    		id,
    		password
    	FROM
    		member
    	WHERE 1=1
    		AND id = #{id}
    		<if test="password != null and !password.equals('')">AND password = #{password}</if>
    		
    </select>
    
    <update id="updateMember">
    	UPDATE 
    		member
		SET 
			name = #{name},
			emailFull = CONCAT (#{emailDomain},'@',#{emailAccount}),
			emailDomain = #{emailDomain},
			emailAccount = #{emailAccount},
			password = #{password},
			gender = #{gender},
			memberType  = #{memberType}
		WHERE 
			seq = #{seq}
    </update>
    <update id="updateMemberPhone">
    	UPDATE 
    		memberPhone
		SET 
			number = #{number}
		WHERE 1=1
			AND member_seq = #{seq}
			AND defaultNy = 1
    </update>
    <update id="updateMemberAddress">
    	UPDATE 
    		memberAddress
		SET 
			zipCode = #{zipCode},
			address = #{address},
			addressDetail = #{addressDetail}
		WHERE 
			member_seq = #{seq}
    </update>
    <update id="updateDelMember">
	    UPDATE 
	    		member
			SET 
				delNy = 1
			WHERE 
				seq = #{seq}
    </update>
    <update id="updateDelMemberPhone">
	    UPDATE 
	    		memberPhone
			SET 
				delNy = 1
			WHERE 
				member_seq = #{seq}
    </update>
    <update id="updateDelMemberAddress">
	    UPDATE 
	    		memberAddress
			SET 
				delNy = 1
			WHERE 
				member_seq = #{seq}
    </update>
    <delete id="deleteMember">
    	DELETE FROM
    		member
    	WHERE
    		seq = #{seq}
    </delete>
    <delete id="deleteMemberAddress">
    	DELETE FROM
    		memberAddress
    	WHERE
    		member_seq = #{seq}
    </delete>
    <delete id="deleteMemberPhone">
    	DELETE FROM
    		memberPhone
    	WHERE
    		member_seq = #{seq}
    </delete>
    
</mapper>