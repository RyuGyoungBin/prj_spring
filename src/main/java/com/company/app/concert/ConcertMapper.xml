<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="com.company.app.concert.ConcertMapper">

	<resultMap type="com.company.app.concert.Concert" id="resultMapObj"></resultMap>
	<sql id ="selectCommon">
   		FROM    
	    	concert a
	    	LEFT JOIN concertAddress b on b.concert_seq = a.seq 
    		LEFT JOIN concertDate c on c.concertAddress_seq = b.seq
    		LEFT JOIN concertCastingGroup d on d.concert_seq = a.seq
    		LEFT JOIN concertUploaded e on e.pseq = a.seq AND e.type = 1
		WHERE 1=1
			<if test="seq != null and !seq.equals('')">AND a.seq = #{seq}</if>
			<if test="concertType != null and !concertType.equals('')">AND a.concertType = #{concertType}</if>
    </sql>
    <sql id="selectConcert">
    	a.seq,
   		a.concertType,
   		a.concertTitle,
   		a.concertDetailText,
   		a.delNy,
   		a.defaultNy,
   		a.memberSeq,
   		b.concertZipCode,
   		b.concertAddress,
   		b.concertAddressDetail,
		c.concertDate,
		c.concertDateTime,
		(SELECT
			e.name
		FROM
			concertCasting e
		WHERE 1=1
			AND e.seq = d.concertCasting_seq
		) as name,
		c.seq as concertDateSeq,
		e.type,
		e.path,
		e.uuidName
		
		
	</sql>


   	<select id="selectOneCount" resultType="Integer">
		SELECT count(*)
		<include refid="selectCommon" />
	</select>
   	<select id="selectList" resultMap="resultMapObj">
		SELECT aa.* FROM (   	
	   		SELECT
    		<include refid="selectConcert" />
	    	<include refid="selectCommon" />
		) aa
		LIMIT #{rowNumToShow} OFFSET #{startRnumForMysql}	   			
   	</select>
   	<select id="selectOne" resultMap="resultMapObj">
	   		SELECT
    		<include refid="selectConcert" />
    	FROM    
	    	concert a
	    	LEFT JOIN concertAddress b on b.concert_seq = a.seq 
    		LEFT JOIN concertDate c on c.concertAddress_seq = b.seq
    		LEFT JOIN concertCastingGroup d on d.concert_seq = a.seq
		WHERE 1=1
			AND a.seq = #{seq}
			AND c.seq = #{concertDateSeq}
   	</select>
   	<select id="selectConcertList" resultMap="resultMapObj">
   		SELECT
   			a.seq,
   			a.concertType,
   			a.concertTitle,
   			(SELECT
   				MIN(d.concertDate)
   			FROM
   				concertDate d
   			WHERE 1=1
   				AND d.concertAddress_Seq = b.seq
   			) as concertDateMin,
   			(SELECT
   				MAX(d.concertDate)
   			FROM
   				concertDate d
   			WHERE 1=1
   				AND d.concertAddress_Seq = b.seq
   			) as concertDateMax,
   			(SELECT
				e.name
			FROM
				concertCasting e
			WHERE 1=1
				AND e.seq = d.concertCasting_seq
			) as name,
			b.concertAddress,
			b.concertAddressDetail,
			b.seq concertAddress_seq,
			e.type,
			e.path,
			e.originalName,
			e.uuidName
   		FROM
   			concert a
   			LEFT JOIN concertAddress b on b.concert_seq = a.seq 
   			LEFT JOIN concertCastingGroup d on d.concert_seq = a.seq
   			LEFT JOIN concertUploaded e on e.pseq = a.seq ANd e.type =1
   		WHERE 1=1
   			<if test="concertType != null and !concertType.equals('')">AND a.concertType = #{concertType}</if>
   			AND e.type = 1
   	</select>
   	<select id="selectConcertOne" resultMap="resultMapObj">
   		SELECT
   			a.seq,
   			a.concertType,
   			a.concertTitle,
   			(SELECT
   				MIN(d.concertDate)
   			FROM
   				concertDate d
   			WHERE 1=1
   				AND d.concertAddress_Seq = b.seq
   			) as concertDateMin,
   			(SELECT
   				MAX(d.concertDate)
   			FROM
   				concertDate d
   			WHERE 1=1
   				AND d.concertAddress_Seq = b.seq
   			) as concertDateMax,
   			(SELECT
				e.name
			FROM
				concertCasting e
			WHERE 1=1
				AND e.seq = d.concertCasting_seq
			) as name,
			b.concertAddress,
			b.concertAddressDetail,
			b.seq concertAddress_seq
   		FROM
   			concert a
   			LEFT JOIN concertAddress b on b.concert_seq = a.seq 
   			LEFT JOIN concertCastingGroup d on d.concert_seq = a.seq
   		WHERE 1=1
   			AND a.seq = #{seq}
   	</select>
   	<select id="selectDate" resultMap="resultMapObj">
   		SELECT
   			*
   		FROM
   			concertDate
   		WHERE 1=1
   			AND concertAddress_seq = #{concertAddress_seq}
   			<if test="concertDate != null and !concertDate.equals('')">AND concertDate LIKE CONCAT('%',#{concertDate},'%')</if>
   			<if test="dateDefaultNy != null and !dateDefaultNy.equals('')">AND defaultNy = 1</if>
   			
   		ORDER BY
   			concertDate, concertDateTime
   	</select>
   	<select id="selectSeatCount" resultType="Integer">
   		SELECT
   			count(*)
   		FROM
   			concertAddressSeat
   		WHERE 1=1
   			AND concertDate_seq = #{concertDate_seq}
   	</select>
   	<select id="selectSeat" resultMap="resultMapObj">
   		SELECT
   			*
   		FROM
   			concertAddressSeat
   		WHERE 1=1
   			AND concertDate_seq = #{concertDate_seq}
   		ORDER BY
   			seatRow, seatCol
   	</select>
   	<select id="selectSeatGroup" resultMap="resultMapObj">
   		SELECT
   			*,
   			sum(seatNy) seatN,
   			count(seatNy) seatTotal
   		FROM
   			concertAddressSeat
   		WHERE 1=1
   			<if test="concertDate_seq != null and !concertDate_seq.equals('')">AND concertDate_seq = #{concertDate_seq}</if>
   		GROUP BY seatRank
   	</select>
   	<select id="selectSeatRow" resultMap="resultMapObj">
   		SELECT
   			*
   		FROM
   			concertAddressSeat
   		WHERE 1=1
   			<if test="concertDate_seq != null and !concertDate_seq.equals('')">AND concertDate_seq = #{concertDate_seq}</if>
   		GROUP BY seatRow
   	</select>
   	<select id="selectTicket" resultMap="resultMapObj">
   		SELECT
   			seq,
   			delNy,
   			ticketDate,
   			ticketDateRe,
   			memberSeq,
   			concertAddressSeat_seq
   		FROM
   			concertTicket
   		WHERE 1=1
   	</select>
   	<select id="selectReview" resultMap="resultMapObj">
   		SELECT
   			seq,
   			content,
   			concertGrade,
   			concertReviewDate,
   			defaultNy,
   			delNy,
   			memberSeq,
   			concertDate_seq,
   			concertTicket_seq
   		FROM
   			concertReview
   		WHERE 1=1
   	</select>
   	<select id="selectUploaded" resultMap="resultMapObj">
    	SELECT
    		*
    	FROM
    		concertUploaded
		WHERE 1=1
	    	AND pseq = #{seq}
	    	
    </select>
   	
   	<insert id="insertConcert">
    	insert into `concert` (
    		concertType,
			concertTitle,
			concertDetailText,
			delNy,
			defaultNy,
			memberSeq
    	) values(
    		#{concertType},
    		#{concertTitle},
    		#{concertDetailText},
    		0,
    		#{defaultNy},
    		#{memberSeq}
    	)
    	<selectKey resultType="String" keyProperty="seq" order="AFTER">
			SELECT last_insert_id()
		 </selectKey>
    </insert>
    <insert id="insertConcertAddress">
    	insert into `concertAddress` (
    		concertZipCode,
    		concertAddress,
    		concertAddressDetail,
    		concert_seq,
    		delNy
    	) values (
    		#{concertZipCode},
    		#{concertAddress},
    		#{concertAddressDetail},
    		#{seq},
    		0
    	)
    	<selectKey resultType="String" keyProperty="concertAddress_seq" order="AFTER">
			SELECT last_insert_id()
		 </selectKey>
    </insert>
    
    <insert id="insertConcertDate">
    	insert into `concertDate` (
    		concertDate,
    		concertDateTime,
    		defaultNy,
    		concertAddress_seq
    	) values (
    		#{concertDate},
    		#{concertDateTime},
    		#{dateDefaultNy},
    		#{concertAddress_seq}
    	)
    </insert>
    <insert id="insertConcertCasting">
    	insert into `concertCasting` (
    		name
    	) values (
    		#{name}
    	)
    	<selectKey resultType="String" keyProperty="concertCasting_seq" order="AFTER">
			SELECT last_insert_id()
		 </selectKey>
    </insert>
    <insert id="insertConcertCastingGroup">
    	insert into `concertCastingGroup` (
    		concert_seq,
    		concertCasting_seq
    	) values (
    		#{seq},
    		#{concertCasting_seq}
    	)
    </insert>
    <!-- uploaded s -->
	<insert id="insertUploaded">
		INSERT INTO ${tableName} (
			type
			,defaultNy
			,sort
			,path
			,originalName
			,uuidName
			,ext
			,size
			,delNy
			,pseq
		) values (
			#{type}
			,#{defaultNy}
			,#{sort}
			,#{path}
			,#{originalName}
			,#{uuidName}
			,#{ext}
			,#{size}
			,0
			,#{seq}
		)
	</insert>
   	
</mapper>